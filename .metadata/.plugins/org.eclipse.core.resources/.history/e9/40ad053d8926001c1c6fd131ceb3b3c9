# stripsProblem.py - STRIPS Representations of Actions
# AIFCA Python3 code Version 0.9.1 Documentation at http://aipython.org
# from decnNetworks import boolean

# Artificial Intelligence: Foundations of Computational Agents
# http://artint.info
# Copyright David L Poole and Alan K Mackworth 2017-2020.
# This work is licensed under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License.
# See: http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en

class Strips(object):
    def __init__(self, name, preconds, effects, cost=1):
        """
        defines the STRIPS representation for an action:
        * name is the name of the action
        * preconds, the preconditions, is feature:value dictionary that must hold
        for the action to be carried out
        * effects is a feature:value map that this action makes
        true. The action changes the value of any feature specified
        here, and leaves other features unchanged.
        * cost is the cost of the action
        """
        self.name = name
        self.preconds = preconds
        self.effects = effects
        self.cost = cost

    def __repr__(self):
        return self.name

class STRIPS_domain(object):
    def __init__(self, feature_domain_dict, actions):
        """Problem domain
        feature_domain_dict is a feature:domain dictionary, 
                mapping each feature to its domain
        actions
        """
        self.feature_domain_dict = feature_domain_dict
        self.actions = actions

class Planning_problem(object):
    def __init__(self, prob_domain, initial_state, goal):
        """
        a planning problem consists of
        * a planning domain
        * the initial state
        * a goal 
        """
        self.prob_domain = prob_domain
        self.initial_state = initial_state
        self.goal = goal

boolean = {True, False}
# delivery_domain = STRIPS_domain(
#     {'RLoc':{'cs', 'off', 'lab', 'mr'}, 'RHC':boolean, 'SWC':boolean,
#      'MW':boolean, 'RHM':boolean},           #feature:values dictionary
#     { Strips('mc_cs', {'RLoc':'cs'}, {'RLoc':'off'}),   
#      Strips('mc_off', {'RLoc':'off'}, {'RLoc':'lab'}),
#      Strips('mc_lab', {'RLoc':'lab'}, {'RLoc':'mr'}),
#      Strips('mc_mr', {'RLoc':'mr'}, {'RLoc':'cs'}),
#      Strips('mcc_cs', {'RLoc':'cs'}, {'RLoc':'mr'}),   
#      Strips('mcc_off', {'RLoc':'off'}, {'RLoc':'cs'}),
#      Strips('mcc_lab', {'RLoc':'lab'}, {'RLoc':'off'}),
#      Strips('mcc_mr', {'RLoc':'mr'}, {'RLoc':'lab'}),
#      Strips('puc', {'RLoc':'cs', 'RHC':False}, {'RHC':True}),  
#      Strips('dc', {'RLoc':'off', 'RHC':True}, {'RHC':False, 'SWC':False}),
#      Strips('pum', {'RLoc':'mr','MW':True}, {'RHM':True,'MW':False}),
#      Strips('dm', {'RLoc':'off', 'RHM':True}, {'RHM':False})
#    } )
#
# problem0 = Planning_problem(delivery_domain,
#                             {'RLoc':'lab', 'MW':True, 'SWC':True, 'RHC':False, 
#                              'RHM':False}, 
#                             {'RLoc':'off'})
# problem1 = Planning_problem(delivery_domain,
#                             {'RLoc':'lab', 'MW':True, 'SWC':True, 'RHC':False, 
#                              'RHM':False}, 
#                             {'SWC':False})
# problem2 = Planning_problem(delivery_domain,
#                             {'RLoc':'lab', 'MW':True, 'SWC':True, 'RHC':False, 
#                              'RHM':False}, 
#                             {'SWC':False, 'MW':False, 'RHM':False})

#
# ### blocks world
# def move(x,y,z):
#     """string for the 'move' action"""
#     return 'move_'+x+'_from_'+y+'_to_'+z
# def on(x):
#     """string for the 'on' feature"""
#     return x+'_is_on'
# def clear(x):
#     """string for the 'clear' feature"""
#     return 'clear_'+x
# def create_blocks_world(blocks = {'a','b','c','d'}):
#     blocks_and_table = blocks | {'table'}
#     stmap =  {Strips(move(x,y,z),{on(x):y, clear(x):True, clear(z):True}, 
#                                  {on(x):z, clear(y):True, clear(z):False})
#                     for x in blocks
#                     for y in blocks_and_table
#                     for z in blocks
#                     if x!=y and y!=z and z!=x}
#     stmap.update({Strips(move(x,y,'table'), {on(x):y, clear(x):True}, 
#                                  {on(x):'table', clear(y):True})
#                     for x in blocks
#                     for y in blocks
#                     if x!=y})
#     feature_domain_dict = {on(x):blocks_and_table-{x} for x in blocks}
#     feature_domain_dict.update({clear(x):boolean for x in blocks_and_table})
#     return STRIPS_domain(feature_domain_dict, stmap)
#
# blocks1dom = create_blocks_world({'a','b','c'})
# blocks1 = Planning_problem(blocks1dom,
#      {on('a'):'table', clear('a'):True,
#       on('b'):'c',  clear('b'):True,
#       on('c'):'table', clear('c'):False}, # initial state
#      {on('a'):'b', on('c'):'a'})  #goal
#
# blocks2dom = create_blocks_world({'a','b','c','d'})
# tower4 = {clear('a'):True, on('a'):'b',
#           clear('b'):False, on('b'):'c',
#           clear('c'):False, on('c'):'d',
#           clear('d'):False, on('d'):'table'}
# blocks2 = Planning_problem(blocks2dom,
#      tower4, # initial state
#      {on('d'):'c',on('c'):'b',on('b'):'a'})  #goal
#
# blocks3 = Planning_problem(blocks2dom,
#      tower4, # initial state
#      {on('d'):'a', on('a'):'b', on('b'):'c'})  #goal

'''
Vacine App that helps users get a covid vacine 
Problem 0 :  
'''
vaccine_domain = STRIPS_domain(
    {'userLocation':{'home','doctor','vacCentre'},'Healthy':boolean,'DrAppointment':boolean,'Vaccinated':boolean,'vacAppointment':boolean},
    { Strips('home_dr',{'userLocation':'home'},{'userLocation':'doctor'}),
      Strips('dr_home',{'userLocation':'doctor'},{'userLocation':'home'}),
      Strips('home_vacCentre',{'userLocation':'home'},{'userLocation':'vacCentre'}),
      Strips('vacVentre_Home',{'userLocation':'vacCentre'},{'userLocation':'home'}),
      # Strips('vacCentre_Dr',{'userLocation':'vacCentre'},{'userLocation':'doctor'}),
      Strips('makeDrAppointment',{'Healthy':False,'DrAppointment':False},{'Healthy':False,'DrAppointment':True}),
      Strips('goToDoctor',{'userLocation':'doctor','Healthy':False,'DrAppointment':True},{'userLocation':'home','Healthy':True,'DrAppointment':False}),
      Strips('makeVacineAppointment',{'userLocation':'home','Healthy':True,'Vaccinated':False,'vacAppointment':False},{'vacAppointment':True}),
      Strips('getVacinated',{'userLocation':'vacCentre','vacAppointment':True,'Healthy':True,'Vaccinated':False},{'userLocation':'vacCentre','vacAppointment':False,'Vaccinated':True}),
      # Strips('goHome',{'userLocation':'vacCentre','vacAppointment':False,'Vaccinated':True},{'userLocation':'home','vacAppointment':False,'Vaccinated':True}),
    })
problem0 = Planning_problem(vaccine_domain,
                             {'userLocation':'home','Healthy':True,'Vaccinated':False,'vacAppointment':False,}, 
                             {'userLocation':'home','vacAppointment':False,'Vaccinated':True})
problem1 = Planning_problem(vaccine_domain,
                             {'userLocation':'home','Healthy':False,'Vaccinated':False,'vacAppointment':False,'DrAppointment':False}, 
                             {'userLocation':'home','vacAppointment':False,'Vaccinated':True})
problem2 = Planning_problem(vaccine_domain,
                            {'userLocation':'vacCentre','Healthy':False,'Vaccinated':False,'vacAppointment':False,'DrAppointment':False}, 
                            {'userLocation':'home','vacAppointment':False,'Vaccinated':True})
problem3 = Planning_problem(vaccine_domain,
                            {'userLocation':'doctor','Healthy':False,'Vaccinated':True,'vacAppointment':False,'DrAppointment':False}, 
                            {'userLocation':'home','vacAppointment':False,'Vaccinated':True})
problem3 = Planning_problem(vaccine_domain,
                            {'userLocation':'doctor','Healthy':False,'Vaccinated':True,'vacAppointment':False,'DrAppointment':False}, 
                            {'userLocation':'home','vacAppointment':False,'Vaccinated':True})
problem4 = Planning_problem(vaccine_domain,
                            {'userLocation':'vacCentre','Healthy':False,'Vaccinated':True,'vacAppointment':False,'DrAppointment':False}, 
                            {'userLocation':'doctor','vacAppointment':False,'Vaccinated':True})

'''
self moving trolley
items that can be in a trolly that shop has in stock:
shopFruitList = ['bananas','apples','carrots','tomatoes','potatoes','onions','avocado']
shopMilkBreadList =['milk','bread']
shopMeat =['chicken','beef','fish','pork','lamb']
Areas trolly can move:shoppingAisles = {'entrance','fruit&Veg','milk&Bread','meat''checkOut'}

'''
import SelfMovingTrolley as SMT

shoppingList1 = ['bananas','carrots']
shoppingDomain1 = SMT.createShoppingDomain(shoppingList1)# create a domain for each customer depending on shopping list to load in the trolley using SelfMovingTrolley.py
print(shoppingDomain1)
ShoppingProblem1 = Planning_problem(shoppingDomain1,
                                 {'Aisle':'entrance','bananas':False,'carrots':False},{'Aisle':'checkOut','bananas':True,'carrots':True})

shoppingList2 = ['carrots','bread','milk']
shoppingDomain2 = SMT.createShoppingDomain(shoppingList2)
ShoppingProblem2 = Planning_problem(shoppingDomain2,
                                 {'Aisle':'entrance','carrots':False,'bread':False,'milk':False},{'Aisle':'checkOut','carrots':True,'bread':True,'milk':True})

shoppingList3 = ['bread','milk','bananas','pork']
shoppingDomain3 = SMT.createShoppingDomain(shoppingList3)
ShoppingProblem3 = Planning_problem(shoppingDomain3,
                                 {'Aisle':'entrance','carrots':False,'bread':False,'milk':False,'bananas':False,'pork':False},{'Aisle':'entrance','carrots':False,'bread':True,'milk':True,'bananas':True,'pork':True})                                 


